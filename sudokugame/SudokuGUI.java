/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sudokugame;
import java.awt.GridLayout;
import java.util.Random;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.util.HashSet;

/**
 *
 * @author aditya
 */
public class SudokuGUI extends javax.swing.JFrame {
     private JTextField[][] grid;
    private int gridSize;
    private int size;
    private int[][] solution; 
    private JTextField[][] cells;// Holds the correct solution

    /**
     * Creates new form SudokuGUI
     */
    public SudokuGUI() {
        initComponents();
         int gridSize = 4; // or get it from user input
        this.size = gridSize; // Save the size
        generateSudokuPuzzle(gridSize);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        panelGrid = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textFieldGridSize = new java.awt.TextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 102));
        jLabel1.setText("Sudoku Game");

        javax.swing.GroupLayout panelGridLayout = new javax.swing.GroupLayout(panelGrid);
        panelGrid.setLayout(panelGridLayout);
        panelGridLayout.setHorizontalGroup(
            panelGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 292, Short.MAX_VALUE)
        );
        panelGridLayout.setVerticalGroup(
            panelGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        jLabel2.setText("Enter Grid Size:");

        jButton1.setBackground(new java.awt.Color(153, 255, 153));
        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(188, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(186, 186, 186))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(panelGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(textFieldGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(81, 81, 81)
                .addComponent(panelGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(0, 101, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        generateSudokuGrid();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         boolean isCorrect = checkSolution();

    // Display the result using JOptionPane
    if (isCorrect) {
        JOptionPane.showMessageDialog(this, "Congratulations! You've solved the puzzle.", "Success", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Incorrect solution. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed
    }
    
private boolean checkSolution() {
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                String text = cells[row][col].getText();
                if (text.isEmpty() || !text.matches("\\d+")) return false;
                int value = Integer.parseInt(text);
                if (value != solution[row][col]) return false;
            }
        }
        return true;
    }
 private void generateSudokuGrid() {
     

    try {
        int gridSize = Integer.parseInt(textFieldGridSize.getText().trim());

        if (gridSize <= 0) {
            JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for grid size.");
            return;
        }

        panelGrid.removeAll();
        panelGrid.setLayout(new GridLayout(gridSize, gridSize, 2, 2));
        grid = new JTextField[gridSize][gridSize];

        // Generate the Sudoku puzzle
       // int[][] puzzle = generateSudokuPuzzle(gridSize);
        // Step 1: Generate the full solution
this.solution = new int[gridSize][gridSize];
solveSudoku(this.solution, 0, 0, gridSize); // You must have this method implemented

// Step 2: Copy solution to a puzzle
int[][] puzzle = deepCopyGrid(this.solution);

// Step 3: Remove numbers to make it a puzzle
removeNumbers(puzzle, gridSize);

// Step 4: Save grid reference for validation later
this.cells = grid;

        // Add the puzzle values to the grid
        for (int i = 0; i < gridSize; i++) {
            for (int j = 0; j < gridSize; j++) {
                JTextField cell = new JTextField();
                cell.setHorizontalAlignment(JTextField.CENTER);
                cell.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 24));
                cell.setPreferredSize(new java.awt.Dimension(60, 60));

                if (puzzle[i][j] != 0) { // If there's a number, display it
                    cell.setText(String.valueOf(puzzle[i][j]));
                    cell.setEditable(false); // Disable editing for pre-filled numbers
                }

                grid[i][j] = cell;
                panelGrid.add(cell);
            }
        }

        panelGrid.revalidate();
        panelGrid.repaint();

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid number for grid size.");
    }
}

private int[][] generateSudokuPuzzle(int gridSize) {
    // Step 1: Generate a fully solved Sudoku grid
    int[][] puzzle = new int[gridSize][gridSize];
    solveSudoku(puzzle, 0, 0, gridSize);

    // Step 2: Remove numbers to create a puzzle (usually 30 to 40 cells depending on difficulty)
    // Adjust the number of cells to remove based on how difficult you want it
    int cellsToRemove = gridSize * gridSize / 2;  // You can adjust this number to control difficulty
    Random rand = new Random();

    while (cellsToRemove > 0) {
        int row = rand.nextInt(gridSize);
        int col = rand.nextInt(gridSize);

        if (puzzle[row][col] != 0) {  // If cell is not already empty
            puzzle[row][col] = 0;  // Set the cell to 0 (empty)
            cellsToRemove--;
        }
    }

    return puzzle;
}

// This function solves the Sudoku grid using backtracking (for generating a valid solution)
private boolean solveSudoku(int[][] grid, int row, int col, int gridSize) {
    if (row == gridSize) {
        return true;  // All rows are filled, puzzle is solved
    }
    if (col == gridSize) {
        return solveSudoku(grid, row + 1, 0, gridSize);  // Move to next row
    }

    if (grid[row][col] != 0) {
        return solveSudoku(grid, row, col + 1, gridSize);  // Skip pre-filled cells
    }

    for (int num = 1; num <= gridSize; num++) {
        if (isSafe(grid, row, col, num, gridSize)) {
            grid[row][col] = num;  // Try the number
            if (solveSudoku(grid, row, col + 1, gridSize)) {
                return true;  // If the rest of the grid is solvable, return true
            }
            grid[row][col] = 0;  // Backtrack if needed
        }
    }
    return false;  // If no number fits, return false
}

// Check if it's safe to place the number at position (row, col)
private boolean isSafe(int[][] grid, int row, int col, int num, int gridSize) {
    // Check row and column
    for (int i = 0; i < gridSize; i++) {
        if (grid[row][i] == num || grid[i][col] == num) {
            return false;
        }
    }

    // Check subgrid (adjust this logic for different grid sizes, e.g., 4x4, 6x6)
    int subgridSize = (int) Math.sqrt(gridSize);  // For standard Sudoku, subgrid size is sqrt(gridSize)
    int subgridRowStart = (row / subgridSize) * subgridSize;
    int subgridColStart = (col / subgridSize) * subgridSize;

    for (int r = subgridRowStart; r < subgridRowStart + subgridSize; r++) {
        for (int c = subgridColStart; c < subgridColStart + subgridSize; c++) {
            if (grid[r][c] == num) {
                return false;
            }
        }
    }

    return true;
}
private int[][] deepCopyGrid(int[][] original) {
    int[][] copy = new int[original.length][original[0].length];
    for (int i = 0; i < original.length; i++) {
        for (int j = 0; j < original[i].length; j++) {
            copy[i][j] = original[i][j];
        }
    }
    return copy;
}

private void removeNumbers(int[][] puzzle, int gridSize) {
    int cellsToRemove = gridSize * gridSize / 2;
    Random rand = new Random();
    while (cellsToRemove > 0) {
        int row = rand.nextInt(gridSize);
        int col = rand.nextInt(gridSize);
        if (puzzle[row][col] != 0) {
            puzzle[row][col] = 0;
            cellsToRemove--;
        }
    }
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SudokuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SudokuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SudokuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SudokuGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SudokuGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel panelGrid;
    private java.awt.TextField textFieldGridSize;
    // End of variables declaration//GEN-END:variables
}
